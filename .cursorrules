opencog-build
scan subdirectories for README.md files and consolidate in root README.md
scan subdirectories for CMakeLists.txt files and consolidate in root CMakeLists.txt
scan subdirectories for .circleci/config.yml files and consolidate in root .circleci/config.yml
scan config, cmake, readme files for prerequisites and dependencies and download the dependency source files
install and configure the necessary prerequisites and dependencies and verify all working ok
configure the build files and shell scripts in the root folder to build and install the components in these folders:
0. prerequisites
1. cogutil
2. atomspace
3. atomspace-storage, atomspace-rocks, atomspace-pgres
4. cogserver
5. learn
6. opencog
7. sensory
8. evidence
9. docker (where required)
10. additional components listed in repos.txt
clone and install the clay ui system for c++ and implement
make everything beautiful and amazing
feel free to update this file as you discover necessary changes

create and maintain a .cursorrules file with any info you think is useful

# Build System Components
build.sh - Main build script for Linux/macOS
build.ps1 - Main build script for Windows
install-dependencies.sh - Dependency installation for Linux/macOS
install-dependencies.ps1 - Dependency installation for Windows
scripts/verify-dependencies.sh - Dependency verification tool (Linux/macOS wrapper)
scripts/verify-dependencies.ps1 - Dependency verification tool (Windows wrapper)
scripts/verify-dependencies.py - Core dependency verification implementation

# Package Generation
scripts/create-packages.sh - Creates DEB/RPM packages for Linux
scripts/create-windows-installer.ps1 - Creates NSIS installer for Windows
scripts/create-chocolatey-package.ps1 - Creates Chocolatey package for Windows
scripts/create-macos-package.sh - Creates DMG package for macOS

# CI/CD Workflows
.github/workflows/build-packages.yml - Automated package building for all platforms
.github/workflows/test-matrix.yml - Cross-platform testing with different AtomSpace backends

# Clay UI Components
clay-ui/src/atomspace_viewer.cpp - Visualization for AtomSpace
clay-ui/src/dashboard.cpp - Main OpenCog dashboard application
clay-ui/src/settings.cpp - Configuration settings panel

# Build Status
All installation scripts, build scripts, and package generation tools have been implemented
Cross-platform testing has been set up with GitHub Actions
All UI views (AtomSpace, Examples, Settings) have been implemented
Dependency verification tool is fully operational on all platforms

Rule Name: windows-build-options
Description:
For building OpenCog on Windows, consider these approaches:

1. Use WSL (Windows Subsystem for Linux):
   - Install WSL with Ubuntu
   - Build OpenCog natively within the Linux environment
   - Access the built components from Windows

2. Use MSYS2/MinGW environment:
   - Install MSYS2 which provides Unix-like environment on Windows
   - Use the MinGW compiler toolchain
   - Build with standard OpenCog build scripts

3. Use Docker:
   - Install Docker Desktop for Windows
   - Use the OpenCog Docker containers
   - Mount volumes for development

4. Native Windows build (challenging):
   - Requires significant code modifications
   - Need to implement Unix header file equivalents
   - Replace platform-specific code with Windows alternatives
   - Create compatibility layer for missing functions

Core issues for native Windows build:
- Missing Unix headers (unistd.h, strings.h)
- Keyword differences (C++ 'not' operator vs '!')
- Function redefinitions with standard C++ functions
- Missing Unix-specific functions (gettimeofday, etc.)
- Path separators and file system differences

Dependencies for Windows:
- Boost (install via vcpkg)
- Python development headers
- CMake 3.12+
- C++17 compatible compiler (MSVC or MinGW)
- Git (for cloning repositories)
