/*
 * tests/proxy/WriteThruProxyUTest.cxxtest
 *
 * Copyright (C) 2016, 2022 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <thread>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cogserver/server/CogServer.h>

using namespace opencog;

class WriteThruProxyUTest :  public CxxTest::TestSuite
{
private:
	std::thread* main_loop;
	CogServer* csrv;
	AtomSpacePtr as;

public:

	WriteThruProxyUTest()
	{
		logger().set_level(Logger::DEBUG);
		//logger().set_print_to_stdout_flag(true);
	}

	~WriteThruProxyUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp()
	{
		csrv = &cogserver();
		csrv->loadModules();
		csrv->enableNetworkServer(17444);
		main_loop = new std::thread(&CogServer::serverLoop, csrv);

		// Wait for the cogserver to finish initializing.
		sleep(1);
		as = csrv->getAtomSpace();
	}

	void tearDown()
	{
		csrv->stop();
		main_loop->join();
		delete main_loop;
	}

	// XXX TODO -- test the other four handlers, too.

	// Set basic truth-value setting.
	void test_set_tv()
	{
		int rc;
		logger().debug("BEGIN TEST: %s", __FUNCTION__);

		rc = system("echo '(use-modules (opencog persist) (opencog persist-rocks))\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot find Rockstorage\n");
		TS_ASSERT_EQUALS(rc, 0);

		rc = system("echo '(define sto (RocksStorageNode \"rocks:///tmp/test-cogserver.rdb\"))\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot create storage node\n");
		TS_ASSERT_EQUALS(rc, 0);

		rc = system("echo '(cog-open sto)\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot open storage node\n");
		TS_ASSERT_EQUALS(rc, 0);

		// First use of the proxy needs to be *after*
		// the storage nodes have been opened.
		rc = system("echo 'config SexprShellModule libw-thru-proxy.so\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: config failed\n");
		TS_ASSERT_EQUALS(rc, 0);

		// The write-through proxy should pass this into RocksDB
		rc = system("echo 'sexpr\n(cog-set-tv! (Concept \"a\") (stv 0.3 0.4))\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot send s-expression\n");
		TS_ASSERT_EQUALS(rc, 0);

		rc = system("echo '(cog-close sto)\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot close storage node\n");
		TS_ASSERT_EQUALS(rc, 0);

		printf("After initial write, as=\n%s\n", as->to_string().c_str());
		// ======================================================
		rc = system("echo '(cog-atomspace-clear)\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot clear the atomspace\n");
		TS_ASSERT_EQUALS(rc, 0);

		rc = system("echo '(define sto (RocksStorageNode \"rocks:///tmp/test-cogserver.rdb\"))\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot create storage node\n");
		TS_ASSERT_EQUALS(rc, 0);

		rc = system("echo '(cog-open sto)\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot open storage node\n");
		TS_ASSERT_EQUALS(rc, 0);

		rc = system("echo '(load-atomspace)\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot open storage node\n");
		TS_ASSERT_EQUALS(rc, 0);

		rc = system("echo '(cog-close sto)\n' | nc -q 0 localhost 17444");
		if (rc != 0) printf("Error: cannot close storage node\n");
		TS_ASSERT_EQUALS(rc, 0);

		printf("After load, as=\n%s\n", as->to_string().c_str());
		// ======================================================
		// The AtomSpace should contain the ConceptNode created above.

		Handle ha = as->get_node(CONCEPT_NODE, "a");
		TS_ASSERT_DIFFERS(ha.get(), nullptr);

		TruthValuePtr tvp = ha->getTruthValue();
		double mean = tvp->get_mean();
		double conf = tvp->get_confidence();

		TS_ASSERT_LESS_THAN(fabs(mean-0.3), 0.00000001)
		TS_ASSERT_LESS_THAN(fabs(conf-0.4), 0.00000001)

		rc = system("rm -r /tmp/test-cogserver.rdb");
		if (rc != 0) printf("Error: cannot remove the test DB\n");
		TS_ASSERT_EQUALS(rc, 0);

		logger().debug("END TEST: %s", __FUNCTION__);
	}
};
