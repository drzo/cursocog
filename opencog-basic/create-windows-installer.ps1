#
# OpenCog Basic - Windows Installer Creation Script
# This script creates an NSIS installer for OpenCog Basic on Windows
#

Write-Host "OpenCog Basic - Windows Installer Creation" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""

# Check for NSIS
function Check-NSIS {
    $nsisPath = $null
    
    # Try to find NSIS from registry
    try {
        $nsisPath = (Get-ItemProperty -Path "HKLM:\SOFTWARE\NSIS" -Name "")."(default)"
    } catch {
        # Registry key not found
    }
    
    # If not found in registry, try the common install location
    if (-not $nsisPath) {
        $commonPath = "C:\Program Files (x86)\NSIS\makensis.exe"
        if (Test-Path $commonPath) {
            $nsisPath = "C:\Program Files (x86)\NSIS"
        }
    }
    
    if ($nsisPath) {
        return $nsisPath
    } else {
        Write-Host "NSIS not found. Please install NSIS from https://nsis.sourceforge.io/Download" -ForegroundColor Red
        Write-Host "After installing, run this script again." -ForegroundColor Yellow
        return $null
    }
}

# Create the NSIS script
function Create-NSISScript {
    $scriptPath = "build\installer.nsi"
    
    # Create build directory if it doesn't exist
    if (-not (Test-Path "build")) {
        New-Item -Path "build" -ItemType Directory | Out-Null
    }
    
    Write-Host "Creating NSIS installer script..." -ForegroundColor Yellow
    
    $script = @"
; OpenCog Basic Windows Installer Script
; Generated by create-windows-installer.ps1

!include "MUI2.nsh"
!include "LogicLib.nsh"

; General configuration
Name "OpenCog Basic"
OutFile "OpenCog-Basic-0.1.0-Setup.exe"
Unicode True
InstallDir "\$PROGRAMFILES\OpenCog Basic"
InstallDirRegKey HKLM "Software\OpenCog Basic" "Install_Dir"
RequestExecutionLevel admin

; Modern UI configuration
!define MUI_ABORTWARNING
!define MUI_ICON ".\clay-ui\examples\resources\opencog-icon.ico"
!define MUI_UNICON ".\clay-ui\examples\resources\opencog-icon.ico"
!define MUI_HEADERIMAGE
!define MUI_HEADERIMAGE_BITMAP ".\clay-ui\examples\resources\opencog-header.bmp"
!define MUI_WELCOMEFINISHPAGE_BITMAP ".\clay-ui\examples\resources\opencog-welcome.bmp"

; Pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "LICENSE"
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

!insertmacro MUI_LANGUAGE "English"

; Sections
Section "Core Components" SecCore
  SectionIn RO
  
  SetOutPath "\$INSTDIR"
  
  ; Core files
  File "README.md"
  File "LICENSE"
  
  ; Create directories
  CreateDirectory "\$INSTDIR\bin"
  CreateDirectory "\$INSTDIR\examples"
  CreateDirectory "\$INSTDIR\doc"
  
  ; Copy binaries
  SetOutPath "\$INSTDIR\bin"
  File "clay-ui\build\dashboard.exe"
  File "opencog-dashboard.bat"
  
  ; Copy examples
  SetOutPath "\$INSTDIR\examples"
  File /r "examples\*.*"
  
  ; Write the uninstaller
  WriteUninstaller "\$INSTDIR\uninstall.exe"
  
  ; Write the installation path into the registry
  WriteRegStr HKLM "SOFTWARE\OpenCog Basic" "Install_Dir" "\$INSTDIR"
  
  ; Write the uninstall information to the registry
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic" "DisplayName" "OpenCog Basic"
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic" "UninstallString" '"\$INSTDIR\uninstall.exe"'
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic" "DisplayIcon" '"\$INSTDIR\bin\dashboard.exe"'
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic" "DisplayVersion" "0.1.0"
  WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic" "Publisher" "OpenCog Foundation"
  WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic" "NoModify" 1
  WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic" "NoRepair" 1
  
  ; Create shortcuts
  CreateDirectory "\$SMPROGRAMS\OpenCog Basic"
  CreateShortcut "\$SMPROGRAMS\OpenCog Basic\OpenCog Dashboard.lnk" "\$INSTDIR\bin\dashboard.exe"
  CreateShortcut "\$SMPROGRAMS\OpenCog Basic\Uninstall.lnk" "\$INSTDIR\uninstall.exe"
  CreateShortcut "\$DESKTOP\OpenCog Dashboard.lnk" "\$INSTDIR\bin\dashboard.exe"
SectionEnd

Section "Development Files" SecDev
  SetOutPath "\$INSTDIR\include"
  File /r "clay-ui\include\*.*"
  
  SetOutPath "\$INSTDIR\lib"
  File "clay-ui\build\clay_ui.lib"
SectionEnd

; Descriptions
LangString DESC_SecCore \${LANG_ENGLISH} "Core OpenCog Basic components including the dashboard and examples."
LangString DESC_SecDev \${LANG_ENGLISH} "Development headers and libraries for creating custom OpenCog applications."

!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT \${SecCore} \$(DESC_SecCore)
  !insertmacro MUI_DESCRIPTION_TEXT \${SecDev} \$(DESC_SecDev)
!insertmacro MUI_FUNCTION_DESCRIPTION_END

; Uninstaller
Section "Uninstall"
  ; Remove registry keys
  DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\OpenCog Basic"
  DeleteRegKey HKLM "SOFTWARE\OpenCog Basic"

  ; Remove files and directories
  Delete "\$INSTDIR\*.*"
  RMDir /r "\$INSTDIR\bin"
  RMDir /r "\$INSTDIR\examples"
  RMDir /r "\$INSTDIR\include"
  RMDir /r "\$INSTDIR\lib"
  RMDir /r "\$INSTDIR\doc"
  Delete "\$INSTDIR\uninstall.exe"
  RMDir "\$INSTDIR"
  
  ; Remove shortcuts
  Delete "\$SMPROGRAMS\OpenCog Basic\*.*"
  RMDir "\$SMPROGRAMS\OpenCog Basic"
  Delete "\$DESKTOP\OpenCog Dashboard.lnk"

  SetAutoClose true
SectionEnd
"@
    
    # Write the script to a file
    $script | Out-File -FilePath $scriptPath -Encoding ASCII
    
    if (Test-Path $scriptPath) {
        Write-Host "NSIS script created successfully." -ForegroundColor Green
        return $scriptPath
    } else {
        Write-Host "Failed to create NSIS script." -ForegroundColor Red
        return $null
    }
}

# Build the installer
function Build-Installer {
    param (
        [string]$nsisPath,
        [string]$scriptPath
    )
    
    Write-Host "Building Windows installer..." -ForegroundColor Yellow
    
    # Make sure resources directory exists with placeholder files if needed
    if (-not (Test-Path "clay-ui\examples\resources")) {
        New-Item -Path "clay-ui\examples\resources" -ItemType Directory -Force | Out-Null
        
        # Create placeholder files if they don't exist
        $placeholders = @(
            @{Path="clay-ui\examples\resources\opencog-icon.ico"; Content=""},
            @{Path="clay-ui\examples\resources\opencog-header.bmp"; Content=""},
            @{Path="clay-ui\examples\resources\opencog-welcome.bmp"; Content=""}
        )
        
        foreach ($file in $placeholders) {
            if (-not (Test-Path $file.Path)) {
                Write-Host "Creating placeholder for $($file.Path)" -ForegroundColor Yellow
                [byte[]]$content = 0
                [System.IO.File]::WriteAllBytes($file.Path, $content)
            }
        }
    }
    
    # Run NSIS to create the installer
    $makensis = Join-Path $nsisPath "makensis.exe"
    $process = Start-Process -FilePath $makensis -ArgumentList $scriptPath -NoNewWindow -Wait -PassThru
    
    if ($process.ExitCode -eq 0) {
        # Move the installer to the build directory
        if (Test-Path "OpenCog-Basic-0.1.0-Setup.exe") {
            Move-Item -Path "OpenCog-Basic-0.1.0-Setup.exe" -Destination "build\OpenCog-Basic-0.1.0-Setup.exe" -Force
            Write-Host "Installer created successfully: build\OpenCog-Basic-0.1.0-Setup.exe" -ForegroundColor Green
            return $true
        } else {
            Write-Host "Installer was built but could not be found." -ForegroundColor Red
            return $false
        }
    } else {
        Write-Host "Failed to build installer. NSIS returned error code: $($process.ExitCode)" -ForegroundColor Red
        return $false
    }
}

# Main execution
$nsisPath = Check-NSIS
if (-not $nsisPath) {
    exit 1
}

$scriptPath = Create-NSISScript
if (-not $scriptPath) {
    exit 1
}

$success = Build-Installer -nsisPath $nsisPath -scriptPath $scriptPath
if (-not $success) {
    exit 1
}

Write-Host ""
Write-Host "Windows installer creation completed successfully." -ForegroundColor Green 